// Copyright 2025 DataRobot, Inc. and its affiliates.
// All rights reserved.
// DataRobot, Inc. Confidential.
// This is unpublished proprietary source code of DataRobot, Inc.
// and its affiliates.
// The copyright notice above does not evidence any actual or intended
// publication of such source code.

package dotenv

import (
	"os"
	"slices"
	"strings"
	"time"

	"github.com/spf13/viper"

	"github.com/charmbracelet/log"
	"github.com/datarobot/cli/cmd/auth"
	"github.com/spf13/cobra"
)

var Cmd = &cobra.Command{
	Use:   "dotenv",
	Short: "Add Datarobot credentials to .env file",
	Long:  "Generate or update .env file with Datarobot credentials",
	Run:   Run,
}

var defaultEnvTemplate = `# Autogenerated by dr dotenv

DATAROBOT_ENDPOINT=
DATAROBOT_API_TOKEN=
`

func backupAndCreate(dotenvFile string) (*os.File, error) {
	if _, err := os.Stat(dotenvFile); err == nil {
		backupFile := dotenvFile + "." + time.Now().Format(time.RFC3339)

		err = os.Rename(dotenvFile, backupFile)
		if err != nil {
			return nil, err
		}

		log.Info("Backing up " + dotenvFile + " as " + backupFile)
	}

	f, err := os.Create(dotenvFile)

	return f, err
}

func readTemplate(dotenvFile string) []string {
	var dotenvTemplate string

	templateFiles := []string{
		dotenvFile + ".sample",
		dotenvFile + ".template",
		dotenvFile,
	}

	for _, templateFile := range templateFiles {
		if _, err := os.Stat(templateFile); err != nil {
			continue
		}

		bytes, err := os.ReadFile(templateFile)
		if err != nil {
			log.Warn(err)
			continue
		}

		if len(bytes) == 0 {
			continue
		}

		log.Info("Using " + templateFile + " as template")
		dotenvHeader := "# Autogenerated by dr dotenv from " + templateFile + " file\n\n"
		dotenvTemplate = dotenvHeader + string(bytes)

		break
	}

	if len(dotenvTemplate) == 0 {
		return slices.Collect(strings.Lines(defaultEnvTemplate))
	}

	return slices.Collect(strings.Lines(dotenvTemplate))
}

func writeVariable(f *os.File, name, key string) error {
	log.Info("Adding variable " + name)

	value := viper.GetString(key)
	_, err := f.WriteString(name + "=" + value + "\n")

	return err
}

func writeFromTemplate(f *os.File, templateLines []string) error {
	for _, templateLine := range templateLines {
		var err error

		if strings.HasPrefix(templateLine, "DATAROBOT_ENDPOINT=") {
			err = writeVariable(f, "DATAROBOT_ENDPOINT", auth.DataRobotURL)
		} else if strings.HasPrefix(templateLine, "DATAROBOT_API_TOKEN=") {
			err = writeVariable(f, "DATAROBOT_API_TOKEN", auth.DataRobotAPIKey)
		} else {
			_, err = f.WriteString(templateLine)
		}

		if err != nil {
			return err
		}
	}

	return nil
}

func Run(_ *cobra.Command, _ []string) {
	dotenvFile := ".env"
	templateLines := readTemplate(dotenvFile)

	f, err := backupAndCreate(dotenvFile)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	err = writeFromTemplate(f, templateLines)
	if err != nil {
		log.Error(err)
	}
}
