// Copyright 2025 DataRobot, Inc. and its affiliates.
// All rights reserved.
// DataRobot, Inc. Confidential.
// This is unpublished proprietary source code of DataRobot, Inc.
// and its affiliates.
// The copyright notice above does not evidence any actual or intended
// publication of such source code.

package dotenv

import (
	"os"
	"strings"
	"time"

	"github.com/charmbracelet/log"
	"github.com/datarobot/cli/cmd/auth"
	"github.com/spf13/cobra"
)

var Cmd = &cobra.Command{
	Use:   "dotenv",
	Short: "Add Datarobot credentials to .env file",
	Long:  "Generate or update .env file with Datarobot credentials",
	Run:   Run,
}

var defaultEnvTemplate = `# Autogenerated by dr dotenv

DATAROBOT_ENDPOINT=
DATAROBOT_API_TOKEN=
`

func backupAndCreate(dotenvFile string) (*os.File, error) {
	if _, err := os.Stat(dotenvFile); err == nil {
		backupFile := dotenvFile + "." + time.Now().Format(time.RFC3339)

		err = os.Rename(dotenvFile, backupFile)
		if err != nil {
			return nil, err
		}

		log.Info("Backing up " + dotenvFile + " as " + backupFile)
	}

	f, err := os.Create(dotenvFile)

	return f, err
}

func readTemplate(dotenvFile string) string {
	var dotenvTemplate string

	templateFiles := []string{
		dotenvFile + ".sample",
		dotenvFile + ".template",
	}

	for _, templateFile := range templateFiles {
		if _, err := os.Stat(templateFile); err != nil {
			continue
		}

		bytes, err := os.ReadFile(templateFile)
		if err != nil {
			log.Warn(err)
			continue
		}

		if len(bytes) == 0 {
			continue
		}

		log.Print("Using " + templateFile + " as template")
		dotenvHeader := "# Autogenerated by dr dotenv from " + templateFile + " file\n\n"
		dotenvTemplate = dotenvHeader + string(bytes)

		break
	}

	if len(dotenvTemplate) == 0 {
		return defaultEnvTemplate
	}

	return dotenvTemplate
}

func addDatarobotEndpoint(f *os.File) error {
	datarobotEndpoint, err := auth.GetURL(false)
	if err != nil {
		return err
	}

	log.Print("Adding DATAROBOT_ENDPOINT")

	_, err = f.WriteString("DATAROBOT_ENDPOINT=" + datarobotEndpoint + "\n")

	return err
}

func addDatarobotAPIToken(f *os.File) error {
	datarobotAPIToken, err := auth.GetAPIKey()
	if err != nil {
		return err
	}

	log.Print("Adding DATAROBOT_API_TOKEN")

	_, err = f.WriteString("DATAROBOT_API_TOKEN=" + datarobotAPIToken + "\n")

	return err
}

func writeFromTemplate(f *os.File, dotenvTemplate string) {
	for templateLine := range strings.Lines(dotenvTemplate) {
		var err error

		if strings.HasPrefix(templateLine, "DATAROBOT_ENDPOINT=") {
			err = addDatarobotEndpoint(f)
		} else if strings.HasPrefix(templateLine, "DATAROBOT_API_TOKEN=") {
			err = addDatarobotAPIToken(f)
		} else {
			_, err = f.WriteString(templateLine)
		}

		if err != nil {
			log.Error(err)
		}
	}
}

func Run(_ *cobra.Command, _ []string) {
	dotenvFile := ".env"

	f, err := backupAndCreate(dotenvFile)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	writeFromTemplate(f, readTemplate(dotenvFile))
}
