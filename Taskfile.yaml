version: "3"

vars:
  VERSION_PACKAGE: "github.com/datarobot/cli/internal/version"
  VERSION: { sh: 'git describe --long --always --abbrev=15' }
  COMMIT: { sh: 'git describe --dirty --long --always --abbrev=15' }
  BUILD_DATE:    { sh: 'date -u +"%Y-%m-%dT%H:%M:%SZ"' }
  LDFLAGS_COMMON: |
    -X {{.VERSION_PACKAGE}}.GitCommit={{.COMMIT}} \
    -X {{.VERSION_PACKAGE}}.Version={{.VERSION}} \
    -X {{.VERSION_PACKAGE}}.BuildDate={{.BUILD_DATE}}
  BIN_DIR:      "$CWD/tmp/bin"

dotenv: ['.env']

tasks:
  help:
    desc: "üõ†Ô∏è Dev Commands"
    cmds:
      - echo "üõ†Ô∏è Dev Commands"
      - task --list

  install-tools:
    desc: "Install static checkers & other binaries"
    cmds:
      - echo "üöö Downloading tools‚Ä¶"
      - export GOBIN={{.BIN_DIR}}
      - |
          go install mvdan.cc/gofumpt@latest
          go install github.com/air-verse/air@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/g4s8/envdoc@latest
          go install github.com/denis-tingaikin/go-header/cmd/go-header@latest
          go install github.com/goreleaser/goreleaser/v2@latest

  lint:
    desc: "Lint the source code"
    deps: [install-tools]
    cmds:
      - echo "üßπ Cleaning go.mod‚Ä¶"
      - go mod tidy
      - echo "üßπ Formatting files‚Ä¶"
      - go fmt ./...
      - '{{.BIN_DIR}}/gofumpt -l -w .'
      - echo "üßπ Vetting go.mod‚Ä¶"
      - go vet ./...
      - echo "üßπ GoCI Lint‚Ä¶"
      - '{{.BIN_DIR}}/golangci-lint run ./...'
      - echo "üßπ Check GoReleaser‚Ä¶"
      - '{{.BIN_DIR}}/goreleaser check'

  run:
    desc: "Run CLI"
    cmds:
      - go run -ldflags "{{.LDFLAGS_COMMON}}" main.go -- {{ join .ARGS " " }}

  build:
    desc: "Build CLI"
    cmds:
      - 'echo "üî® Building binary‚Ä¶"'
      - 'echo "Version: {{.VERSION}}"'
      - 'echo "Commit: {{.COMMIT}}"'
      - 'echo "Build Date: {{.BUILD_DATE}}"'
      - 'go build -ldflags "{{.LDFLAGS_COMMON}}" -o ./dist/cli'

  gen:
    desc: "Generate Go code"
    cmds:
      - go generate ./...

  gen-check:
    desc: "Check if Go code needs to be generated"
    deps: [gen]
    cmds:
      - git diff --exit-code

  test:
    desc: "Run tests"
    cmds:
      - go test -v -count=1 -race -shuffle=on -coverprofile=coverage.txt ./...

  copyright:
    desc: "Apply copyrights to all files"
    aliases:
      - license
    cmds:
      - echo "üßπ Applying license headers"
      - |
        docker run --rm \
          -v $PWD:/github/workspace \
          ghcr.io/apache/skywalking-eyes/license-eye:4021a396bf07b2136f97c12708476418a8157d72 \
          -v info -c .licenserc.yaml header fix