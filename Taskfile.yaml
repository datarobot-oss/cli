version: "3"

vars:
  VERSION_PACKAGE: "github.com/datarobot/cli/internal/version"
  VERSION: { sh: "git describe --long --always --abbrev=15" }
  COMMIT: { sh: "git describe --dirty --long --always --abbrev=15" }
  BUILD_DATE: { sh: 'date -u +"%Y-%m-%dT%H:%M:%SZ"' }
  LDFLAGS_COMMON: |
    -X {{.VERSION_PACKAGE}}.GitCommit={{.COMMIT}} \
    -X {{.VERSION_PACKAGE}}.Version={{.VERSION}} \
    -X {{.VERSION_PACKAGE}}.BuildDate={{.BUILD_DATE}}
  BIN_DIR: "$PWD/tmp/bin"

dotenv: [".env"]

tasks:
  help:
    desc: "üõ†Ô∏è Dev Commands"
    cmds:
      - echo "üõ†Ô∏è Dev Commands"
      - task --list

  default:
    cmds:
      - task help

  install-tools:
    silent: true
    desc: "Install static checkers & other binaries"
    cmds:
      - |
        echo "üöö Downloading tools‚Ä¶"
        export GOBIN={{.BIN_DIR}}

        go install mvdan.cc/gofumpt@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install github.com/goreleaser/goreleaser/v2@latest

  dev-init:
    silent: true
    desc: "Initialize development environment"
    deps: [lint]
    cmds:
      - |
        export GOBIN={{.BIN_DIR}}
        echo "üîß Initializing development environment‚Ä¶"
        mkdir -p {{.BIN_DIR}}
        echo "üõ†Ô∏è Installing tools‚Ä¶"
        go get github.com/stretchr/testify@latest
        echo "‚úÖ Development environment initialized."

  lint:
    silent: true
    desc: "Lint the source code"
    deps: [install-tools]
    cmds:
      - echo "üßπ Cleaning go.mod‚Ä¶"
      - go mod tidy
      - echo "üßπ Formatting files‚Ä¶"
      - go fmt ./...
      - "{{.BIN_DIR}}/gofumpt -l -w ."
      - echo "üßπ Vetting go.mod‚Ä¶"
      - go vet ./...
      - echo "üßπ GoCI Lint‚Ä¶"
      - "{{.BIN_DIR}}/golangci-lint run ./..."
      - echo "üßπ Check GoReleaser‚Ä¶"
      - "{{.BIN_DIR}}/goreleaser check"

  run:
    silent: true
    desc: "Run CLI"
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          go run -ldflags "{{.LDFLAGS_COMMON}}" main.go
        else
          go run -ldflags "{{.LDFLAGS_COMMON}}" main.go -- {{.CLI_ARGS}}
        fi

  build:
    silent: true
    desc: "Build CLI"
    cmds:
      - 'echo "üî® Building binary‚Ä¶"'
      - 'echo "‚Ä¢ Version: {{.VERSION}}"'
      - 'echo "‚Ä¢ Commit: {{.COMMIT}}"'
      - 'echo "‚Ä¢ Build Date: {{.BUILD_DATE}}"'
      - 'go build -ldflags "{{.LDFLAGS_COMMON}}" -o ./dist/dr'
      - 'echo "‚ú® Binary built at ./dist/dr"'

  gen:
    silent: true
    desc: "Generate Go code"
    cmds:
      - go generate ./...

  gen-check:
    silent: true
    desc: "Check if Go code needs to be generated"
    deps: [gen]
    cmds:
      - git diff --exit-code

  test:
    silent: true
    desc: "Run tests"
    cmds:
      - go test -v -count=1 -race -shuffle=on -coverprofile=coverage.txt ./...

  copyright:
    silent: true
    desc: "Apply copyrights to all files"
    aliases:
      - license
    cmds:
      - echo "üßπ Applying license headers"
      - |
        docker run --rm \
          -v $PWD:/github/workspace \
          ghcr.io/apache/skywalking-eyes/license-eye:4021a396bf07b2136f97c12708476418a8157d72 \
          -v info -c .licenserc.yaml header fix
