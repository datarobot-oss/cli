name: Checks

concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - master

  pull_request:
    branches:
      - main
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint Code

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'

      - name: Install Taskfile
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # cache go modules
      - uses: actions/cache@v4
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
            bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Golang Lint Command
        run: |
          task lint


  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'

      - name: Install Taskfile
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
            bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Golang Test Command
        run: |
          task test

  copyright:
    runs-on: ubuntu-latest
    name: Copyrights

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check License Header
        uses: apache/skywalking-eyes/header@main
        with:
          config: .licenserc.yaml

  generate:
    runs-on: ubuntu-latest
    name: Ensure Code Generated

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Taskfile
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'

      - name: Install Envdoc
        run: |
          go install github.com/g4s8/envdoc@latest

      - name: Add Go Bin to PATH
        run: |
          echo "${{ github.workspace }}/go/bin" >> "$GITHUB_PATH"

      - name: Ensure Code Generated
        run: |
          task gen-check

  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    name: Build Binary
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Taskfile
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'

      - name: Build the DR CLI Binary
        run:  task build

      - name: Check if binary runs without errors
        shell: bash
        run: |
          ./dist/dr --help

  smoke-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: Run Smoke Tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Ubuntu - Install expect w/ apt-get (in order to use unbuffer command)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y expect

      - name: MacOS - Install expect w/ homebrew (in order to use unbuffer command)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install expect

      - name: Install Taskfile
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'

      - name: Build the DR CLI Binary
        run:  task build

      - name: Move the Binary
        run:  sudo mv ./dist/dr /usr/local/bin/dr

      - name: Run smoke tests for binary
        run: |
          task smoke-test
